import React, { useState, useEffect, useCallback, useRef } from 'react';
import { RotateCcw, Zap, Share2 } from 'lucide-react';

const UniKornGame = () => {
  // Tema verileri
  const entrepreneurTheme = {
    2: { icon: '‚ú®', color: 'from-purple-400 to-pink-400', name: 'Fikir' },
    4: { icon: 'üì±', color: 'from-blue-400 to-cyan-400', name: 'Prototip' },
    8: { icon: 'üë§', color: 'from-green-400 to-emerald-400', name: 'ƒ∞lk Kullanƒ±cƒ±' },
    16: { icon: 'üí∞', color: 'from-yellow-400 to-orange-400', name: '√áekirdek Yatƒ±rƒ±m' },
    32: { icon: 'üìà', color: 'from-red-400 to-pink-400', name: 'B√ºy√ºme A≈üamasƒ±' },
    64: { icon: 'ü§ñ', color: 'from-indigo-400 to-purple-400', name: 'Lusid AI' },
    128: { icon: 'üåê', color: 'from-cyan-400 to-blue-400', name: 'K√ºr≈üat App' },
    256: { icon: 'üåç', color: 'from-emerald-400 to-green-400', name: 'Global Pazar' },
    512: { icon: 'üë•', color: 'from-orange-400 to-red-400', name: 'Milyon Kullanƒ±cƒ±' },
    1024: { icon: 'ü¶Ñ', color: 'from-pink-400 to-purple-400', name: 'Unicorn Stat√ºs√º' },
    2048: { icon: 'üèÜ', color: 'from-yellow-400 to-orange-400', name: 'Teknoloji Lideri' }
  };

  const [board, setBoard] = useState(() => initializeBoard());
  const [score, setScore] = useState(0);
  const [gameWon, setGameWon] = useState(false);
  const [gameOver, setGameOver] = useState(false);
  const [pivotUsed, setPivotUsed] = useState(false);
  const [animation, setAnimation] = useState('');
  const [mergedCells, setMergedCells] = useState([]);
  const [touchStart, setTouchStart] = useState(null);
  const [showShareModal, setShowShareModal] = useState(false);
  const canvasRef = useRef(null);

  function initializeBoard() {
    const newBoard = Array(4).fill().map(() => Array(4).fill(0));
    addRandomTile(newBoard);
    addRandomTile(newBoard);
    return newBoard;
  }

  function addRandomTile(board) {
    const emptyCells = [];
    for (let i = 0; i < 4; i++) {
      for (let j = 0; j < 4; j++) {
        if (board[i][j] === 0) {
          emptyCells.push([i, j]);
        }
      }
    }
    if (emptyCells.length > 0) {
      const [row, col] = emptyCells[Math.floor(Math.random() * emptyCells.length)];
      board[row][col] = Math.random() < 0.9 ? 2 : 4;
    }
  }

  // Ses efektleri
  const playSound = (type) => {
    try {
      const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      const oscillator = audioContext.createOscillator();
      const gainNode = audioContext.createGain();
      
      oscillator.connect(gainNode);
      gainNode.connect(audioContext.destination);
      
      switch (type) {
        case 'move':
          oscillator.frequency.setValueAtTime(200, audioContext.currentTime);
          gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
          break;
        case 'merge':
          oscillator.frequency.setValueAtTime(400, audioContext.currentTime);
          oscillator.frequency.exponentialRampToValueAtTime(600, audioContext.currentTime + 0.1);
          gainNode.gain.setValueAtTime(0.2, audioContext.currentTime);
          break;
        case 'bigMerge':
          oscillator.frequency.setValueAtTime(600, audioContext.currentTime);
          oscillator.frequency.exponentialRampToValueAtTime(800, audioContext.currentTime + 0.2);
          gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
          break;
      }
      
      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.2);
      oscillator.start(audioContext.currentTime);
      oscillator.stop(audioContext.currentTime + 0.2);
    } catch (error) {
      // Ses √ßalƒ±namazsa sessizce devam et
    }
  };

  const moveLeft = useCallback((board) => {
    const newBoard = board.map(row => [...row]);
    let moved = false;
    let newScore = 0;
    const newMergedCells = [];

    for (let i = 0; i < 4; i++) {
      const row = newBoard[i].filter(cell => cell !== 0);
      for (let j = 0; j < row.length - 1; j++) {
        if (row[j] === row[j + 1]) {
          row[j] *= 2;
          newScore += row[j];
          row[j + 1] = 0;
          newMergedCells.push([i, j]);
          if (row[j] === 2048) setGameWon(true);
          
          // Ses efekti
          if (row[j] >= 256) {
            playSound('bigMerge');
          } else {
            playSound('merge');
          }
        }
      }
      const newRow = row.filter(cell => cell !== 0);
      while (newRow.length < 4) {
        newRow.push(0);
      }
      
      for (let j = 0; j < 4; j++) {
        if (newBoard[i][j] !== newRow[j]) {
          moved = true;
        }
        newBoard[i][j] = newRow[j];
      }
    }

    if (moved && newMergedCells.length === 0) {
      playSound('move');
    }

    return { board: newBoard, moved, score: newScore, mergedCells: newMergedCells };
  }, []);

  const moveRight = useCallback((board) => {
    const rotated = board.map(row => [...row].reverse());
    const result = moveLeft(rotated);
    return {
      ...result,
      board: result.board.map(row => [...row].reverse()),
      mergedCells: result.mergedCells.map(([i, j]) => [i, 3 - j])
    };
  }, [moveLeft]);

  const moveUp = useCallback((board) => {
    const transposed = board[0].map((_, colIndex) => board.map(row => row[colIndex]));
    const result = moveLeft(transposed);
    return {
      ...result,
      board: result.board[0].map((_, colIndex) => result.board.map(row => row[colIndex])),
      mergedCells: result.mergedCells.map(([i, j]) => [j, i])
    };
  }, [moveLeft]);

  const moveDown = useCallback((board) => {
    const transposed = board[0].map((_, colIndex) => board.map(row => row[colIndex]).reverse());
    const result = moveLeft(transposed);
    const finalBoard = result.board[0].map((_, colIndex) => 
      result.board.map(row => row[colIndex]).reverse()
    );
    return {
      ...result,
      board: finalBoard,
      mergedCells: result.mergedCells.map(([i, j]) => [3 - i, j])
    };
  }, [moveLeft]);

  const handleMove = useCallback((direction) => {
    if (gameOver || gameWon) return;

    let result;
    switch (direction) {
      case 'left': result = moveLeft(board); break;
      case 'right': result = moveRight(board); break;
      case 'up': result = moveUp(board); break;
      case 'down': result = moveDown(board); break;
      default: return;
    }

    if (result.moved) {
      addRandomTile(result.board);
      setBoard(result.board);
      setScore(prev => prev + result.score);
      setMergedCells(result.mergedCells);
      
      // Animasyon efekti
      setAnimation(`move-${direction}`);
      setTimeout(() => {
        setAnimation('');
        setMergedCells([]);
      }, 300);

      // Oyun bitti mi kontrol et
      if (isGameOver(result.board)) {
        setGameOver(true);
      }
    }
  }, [board, gameOver, gameWon, moveLeft, moveRight, moveUp, moveDown]);

  const isGameOver = (board) => {
    // Bo≈ü h√ºcre var mƒ±?
    for (let i = 0; i < 4; i++) {
      for (let j = 0; j < 4; j++) {
        if (board[i][j] === 0) return false;
      }
    }

    // Birle≈ütirilebilir h√ºcre var mƒ±?
    for (let i = 0; i < 4; i++) {
      for (let j = 0; j < 4; j++) {
        const current = board[i][j];
        if (
          (i < 3 && board[i + 1][j] === current) ||
          (j < 3 && board[i][j + 1] === current)
        ) {
          return false;
        }
      }
    }
    return true;
  };

  const usePivot = () => {
    if (pivotUsed || gameOver) return;
    
    // Tahtayƒ± karƒ±≈ütƒ±r
    const flatBoard = board.flat().filter(cell => cell !== 0);
    const newBoard = Array(4).fill().map(() => Array(4).fill(0));
    
    // Rastgele pozisyonlara yerle≈ütir
    const positions = [];
    for (let i = 0; i < 4; i++) {
      for (let j = 0; j < 4; j++) {
        positions.push([i, j]);
      }
    }
    
    flatBoard.forEach(value => {
      if (positions.length > 0) {
        const randomIndex = Math.floor(Math.random() * positions.length);
        const [row, col] = positions.splice(randomIndex, 1)[0];
        newBoard[row][col] = value;
      }
    });
    
    setBoard(newBoard);
    setPivotUsed(true);
    setAnimation('pivot');
    playSound('bigMerge');
    setTimeout(() => setAnimation(''), 500);
  };

  const resetGame = () => {
    setBoard(initializeBoard());
    setScore(0);
    setGameWon(false);
    setGameOver(false);
    setPivotUsed(false);
    setAnimation('');
    setMergedCells([]);
    setShowShareModal(false);
  };

  // Touch/Mouse handlers - D√ºzeltilmi≈ü versiyon
  const handleTouchStart = (e) => {
    e.preventDefault();
    const touch = e.touches ? e.touches[0] : e;
    setTouchStart({
      x: touch.clientX,
      y: touch.clientY
    });
  };

  const handleTouchEnd = (e) => {
    e.preventDefault();
    if (!touchStart) return;
    
    const touch = e.changedTouches ? e.changedTouches[0] : e;
    const deltaX = touch.clientX - touchStart.x;
    const deltaY = touch.clientY - touchStart.y;
    const minSwipeDistance = 30;
    
    // Hangi y√∂nde daha fazla hareket var?
    if (Math.abs(deltaX) > Math.abs(deltaY)) {
      // Yatay hareket
      if (Math.abs(deltaX) > minSwipeDistance) {
        handleMove(deltaX > 0 ? 'right' : 'left');
      }
    } else {
      // Dikey hareket
      if (Math.abs(deltaY) > minSwipeDistance) {
        handleMove(deltaY > 0 ? 'down' : 'up');
      }
    }
    
    setTouchStart(null);
  };

  // Sosyal medya payla≈üƒ±m fotoƒürafƒ± olu≈ütur
  const generateShareImage = () => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    
    // Canvas boyutu
    canvas.width = 800;
    canvas.height = 800;
    
    // Arka plan gradient
    const gradient = ctx.createLinearGradient(0, 0, 800, 800);
    gradient.addColorStop(0, '#1f2937');
    gradient.addColorStop(0.5, '#1e3a8a');
    gradient.addColorStop(1, '#7c3aed');
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, 800, 800);
    
    // Ba≈ülƒ±k
    ctx.fillStyle = '#ffffff';
    ctx.font = 'bold 60px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('uniKorn 2048', 400, 100);
    
    // Skor
    ctx.font = 'bold 40px Arial';
    ctx.fillText(`Skor: ${score.toLocaleString()}`, 400, 160);
    
    // Tahta √ßiz
    const boardSize = 400;
    const tileSize = (boardSize - 60) / 4;
    const startX = (800 - boardSize) / 2;
    const startY = 200;
    
    // Tahta arka plan
    ctx.fillStyle = '#374151';
    ctx.roundRect(startX, startY, boardSize, boardSize, 20);
    ctx.fill();
    
    // Kutucuklarƒ± √ßiz
    board.forEach((row, i) => {
      row.forEach((cell, j) => {
        const x = startX + 20 + j * (tileSize + 10);
        const y = startY + 20 + i * (tileSize + 10);
        
        if (cell === 0) {
          ctx.fillStyle = '#4b5563';
        } else {
          const tileData = getTileData(cell);
          // Gradient olu≈ütur
          const tileGradient = ctx.createLinearGradient(x, y, x + tileSize, y + tileSize);
          if (tileData.color.includes('purple')) {
            tileGradient.addColorStop(0, '#a855f7');
            tileGradient.addColorStop(1, '#ec4899');
          } else if (tileData.color.includes('blue')) {
            tileGradient.addColorStop(0, '#60a5fa');
            tileGradient.addColorStop(1, '#06b6d4');
          } else if (tileData.color.includes('green')) {
            tileGradient.addColorStop(0, '#34d399');
            tileGradient.addColorStop(1, '#10b981');
          } else {
            tileGradient.addColorStop(0, '#fbbf24');
            tileGradient.addColorStop(1, '#f59e0b');
          }
          ctx.fillStyle = tileGradient;
        }
        
        ctx.roundRect(x, y, tileSize, tileSize, 10);
        ctx.fill();
        
        // ƒ∞kon √ßiz (emoji)
        if (cell !== 0) {
          ctx.font = `${tileSize * 0.4}px Arial`;
          ctx.textAlign = 'center';
          ctx.fillStyle = '#ffffff';
          ctx.fillText(getTileData(cell).icon, x + tileSize/2, y + tileSize/2 + 10);
        }
      });
    });
    
    // Alt yazƒ±
    ctx.font = '30px Arial';
    ctx.fillStyle = '#d1d5db';
    ctx.textAlign = 'center';
    ctx.fillText('K√ºr≈üat\'ƒ±n Giri≈üimcilik Yolculuƒüu', 400, 700);
    ctx.fillText('uniKorn ile oyna!', 400, 750);
    
    return canvas.toDataURL('image/png');
  };

  const shareScore = () => {
    const imageUrl = generateShareImage();
    
    // Mobilde payla≈üƒ±m API'si varsa kullan
    if (navigator.share) {
      // Canvas'ƒ± blob'a √ßevir
      canvasRef.current.toBlob((blob) => {
        const file = new File([blob], 'unikorn-score.png', { type: 'image/png' });
        navigator.share({
          title: 'uniKorn 2048 - Skorum',
          text: `uniKorn 2048'de ${score.toLocaleString()} puan aldƒ±m! Sen de dene!`,
          files: [file]
        });
      });
    } else {
      // Dosya indirme
      const link = document.createElement('a');
      link.download = 'unikorn-score.png';
      link.href = imageUrl;
      link.click();
    }
  };

  useEffect(() => {
    const handleKeyPress = (event) => {
      event.preventDefault();
      switch (event.key) {
        case 'ArrowLeft': 
        case 'a':
        case 'A':
          handleMove('left'); 
          break;
        case 'ArrowRight': 
        case 'd':
        case 'D':
          handleMove('right'); 
          break;
        case 'ArrowUp': 
        case 'w':
        case 'W':
          handleMove('up'); 
          break;
        case 'ArrowDown': 
        case 's':
        case 'S':
          handleMove('down'); 
          break;
        case ' ': 
          event.preventDefault(); 
          usePivot(); 
          break;
      }
    };

    window.addEventListener('keydown', handleKeyPress);
    return () => window.removeEventListener('keydown', handleKeyPress);
  }, [handleMove]);

  const getTileData = (value) => {
    return entrepreneurTheme[value] || { icon: '', color: 'from-gray-400 to-gray-600', name: '' };
  };

  const isMerged = (i, j) => {
    return mergedCells.some(([row, col]) => row === i && col === j);
  };

  const getProgressIcons = () => {
    const icons = Object.keys(entrepreneurTheme).map(key => parseInt(key)).sort((a, b) => a - b);
    return icons.map(value => ({
      value,
      ...entrepreneurTheme[value]
    }));
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900 flex items-center justify-center p-4">
      <canvas ref={canvasRef} className="hidden" />
      <div className="max-w-lg w-full">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-white mb-2 bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent">
            uniKorn 2048
          </h1>
          <p className="text-gray-300 text-sm">Kaydƒ±rarak hareket ettirin</p>
        </div>

        {/* Score */}
        <div className="flex justify-between items-center mb-6">
          <div className="bg-gray-800 rounded-lg px-4 py-2">
            <div className="text-gray-400 text-xs">SKOR</div>
            <div className="text-white text-xl font-bold">{score.toLocaleString()}</div>
          </div>
          <div className="flex gap-2">
            <button
              onClick={usePivot}
              disabled={pivotUsed || gameOver}
              className={`px-4 py-2 rounded-lg font-medium transition-all ${
                pivotUsed || gameOver
                  ? 'bg-gray-700 text-gray-500 cursor-not-allowed'
                  : 'bg-gradient-to-r from-orange-500 to-red-500 text-white hover:from-orange-600 hover:to-red-600 shadow-lg hover:shadow-xl'
              }`}
            >
              <Zap size={16} className="inline mr-1" />
              Pivot
            </button>
            <button
              onClick={resetGame}
              className="px-4 py-2 bg-gradient-to-r from-blue-500 to-cyan-500 text-white rounded-lg font-medium hover:from-blue-600 hover:to-cyan-600 transition-all shadow-lg hover:shadow-xl"
            >
              <RotateCcw size={16} className="inline mr-1" />
              Yeniden
            </button>
          </div>
        </div>

        {/* Game Board */}
        <div 
          className={`bg-gray-800 rounded-2xl p-4 mb-6 transition-all duration-300 select-none cursor-pointer ${animation}`}
          onTouchStart={handleTouchStart}
          onTouchEnd={handleTouchEnd}
          onMouseDown={handleTouchStart}
          onMouseUp={handleTouchEnd}
          style={{ userSelect: 'none', touchAction: 'none' }}
        >
          <div className="grid grid-cols-4 gap-3">
            {board.map((row, i) =>
              row.map((cell, j) => {
                const tileData = getTileData(cell);
                const merged = isMerged(i, j);
                return (
                  <div
                    key={`${i}-${j}`}
                    className={`
                      aspect-square rounded-xl flex items-center justify-center text-white font-bold
                      transition-all duration-300 transform
                      ${cell === 0 
                        ? 'bg-gray-700' 
                        : `bg-gradient-to-br ${tileData.color} shadow-lg ${merged ? 'animate-pulse scale-110' : ''}`
                      }
                    `}
                  >
                    {cell !== 0 && (
                      <div className="text-4xl animate-bounce-subtle">
                        {tileData.icon}
                      </div>
                    )}
                  </div>
                );
              })
            )}
          </div>
        </div>

        {/* Progress Icons */}
        <div className="bg-gray-800 rounded-2xl p-4 mb-4">
          <div className="text-center text-gray-400 text-xs mb-3">Gƒ∞Rƒ∞≈ûƒ∞MCƒ∞Lƒ∞K YOLCULUƒûUNDAKƒ∞ A≈ûAMALAR</div>
          <div className="flex flex-wrap justify-center gap-2">
            {getProgressIcons().map(({ value, icon, color, name }) => (
              <div
                key={value}
                className={`
                  relative group w-10 h-10 rounded-lg flex items-center justify-center text-lg
                  bg-gradient-to-br ${color} shadow-sm
                `}
                title={name}
              >
                {icon}
                <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-gray-900 text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap">
                  {name}
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Game Status */}
        {gameWon && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-gray-800 rounded-2xl p-8 max-w-md mx-4 text-center">
              <div className="text-6xl mb-4 animate-bounce">üèÜ</div>
              <h2 className="text-2xl font-bold text-white mb-4">Tebrikler!</h2>
              <p className="text-gray-300 mb-6">
                Bir fikri zirveye ta≈üƒ±dƒ±n! Bu, doƒüru vizyon, azim ve teknolojiyle nelerin ba≈üarƒ±labileceƒüinin kanƒ±tƒ±. 
                Y√ºkseli≈ü daha yeni ba≈ülƒ±yor. Hayallerini globale ta≈üƒ±mak i√ßin sen de harekete ge√ß! üöÄ
              </p>
              <div className="flex gap-2 justify-center">
                <button
                  onClick={() => setGameWon(false)}
                  className="bg-gradient-to-r from-green-500 to-emerald-500 text-white px-6 py-2 rounded-lg font-medium hover:from-green-600 hover:to-emerald-600 transition-all"
                >
                  Devam Et
                </button>
                <button
                  onClick={() => {
                    setGameWon(false);
                    shareScore();
                  }}
                  className="bg-gradient-to-r from-purple-500 to-pink-500 text-white px-6 py-2 rounded-lg font-medium hover:from-purple-600 hover:to-pink-600 transition-all"
                >
                  <Share2 size={16} className="inline mr-1" />
                  Payla≈ü
                </button>
              </div>
            </div>
          </div>
        )}

        {gameOver && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-gray-800 rounded-2xl p-8 max-w-md mx-4 text-center">
              <div className="text-6xl mb-4">üí™</div>
              <h2 className="text-2xl font-bold text-white mb-4">Oyun Bitti!</h2>
              <p className="text-gray-300 mb-6">
                Her giri≈üimcinin hikayesi b√∂yle ba≈ülar. Denemek, ba≈üarƒ±sƒ±zlƒ±k ya≈üamak ve tekrar kalkmak... 
                Skorun: {score.toLocaleString()}
              </p>
              <div className="flex gap-2 justify-center">
                <button
                  onClick={resetGame}
                  className="bg-gradient-to-r from-blue-500 to-cyan-500 text-white px-6 py-2 rounded-lg font-medium hover:from-blue-600 hover:to-cyan-600 transition-all"
                >
                  Tekrar Dene
                </button>
                <button
                  onClick={shareScore}
                  className="bg-gradient-to-r from-purple-500 to-pink-500 text-white px-6 py-2 rounded-lg font-medium hover:from-purple-600 hover:to-pink-600 transition-all"
                >
                  <Share2 size={16} className="inline mr-1" />
                  Payla≈ü
                </button>
              </div>
            </div>
          </div>
        )}
      </div>

      <style jsx>{`
        .move-left { transform: translateX(-8px); }
        .move-right { transform: translateX(8px); }
        .move-up { transform: translateY(-8px); }
        .move-down { transform: translateY(8px); }
        .pivot { transform: rotate(10deg) scale(1.05); }
        .animate-bounce-subtle {
          animation: bounce-subtle 2s infinite;
        }
        @keyframes bounce-subtle {
          0%, 100% { transform: translateY(0px); }
          50% { transform: translateY(-2px); }
        }
      `}</style>
    </div>
  );
};

export default UniKornGame;
